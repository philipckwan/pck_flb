-if during flashloan but before return, if isOpp:false, can i cancel the flashloan in progress?
-seems one time sushiswap price check took > 3 sec to return, becomes long pole, see 20220706 log; i.e. add a time limit to dex api check, say less than 1.5 sec
-similar time limit concept to limit flashloan execution, if over time, highly consider to cancel the transaction if possible
-need to reintroduce the exchange amount by regular updating, otherwise it will out-sync and cannot detect opportunity
-uniswapV3 DAI:WETH seems to have a lower fee pool, consider to replace that
-add route info, gasPrice to flashloan_tx log
-consider to adjust the isProfit rate, make it higher; or make it lower as seems the lower rate opportunities last longer? need to analyze flashloan_tx to find out
-skew block num handling (e.g. local still FL if it is only 0.14 sec or less behind ALCMY)
-block num check sleep time (i.e. no need to check block number for the next 1.5 sec if just recently updated block num)
-if ALCMY took too long to execute FL, should LOCAL override the FL (i.e. with higher gasPrice?); 
 probably won't happen as now only one of PMTS will do price check for a block
  NO, the average case should be both PMTS will start the price check for a block, but likely LOCAL will finish sooner
 maybe let the ALCMY delegate the FL to LOCAL web3Provider?
DONE(v2.19)-consider to add more web3Provider, i.e. infura, quicknode
-ALCMY block num check took too long to response (i.e. > 1 sec), causing mislead in block start/end time
 make LOCAL poll more frequent, rely on ALCMY only to detect whether LOCAL has skewed for more than 1 block
-check spreadsheet, investigate the case when 2 flashloan submitted more than 1~2 sec, with same gasPrice, ends up confirmed in same block, but the position is not back to back
DONE(v2.21)-bug in Web3Handler to get block number between alchemy vs quicknode

resolved:
DONE(v2.15)-HIGH PRIORITY; first fequent check for blocktime udpated, then issue arb check

DONE(v2.18)-if local already finished price check at block X, but alchemy still not yet start price check at block X, then alchemy can simply skip this block's price check
DONE(v2.16)-BUG: FlashloanExecutor, line 55,       this.connectedFLContract = flContract.connect(PCKWeb3Handler.localWeb3Signer);
DONE(v2.14)-minor update to the flashloan_tx log
DONE(v2.13)-consolidate logging of opportunity detected to flashloan executed
DONE(v2.10)-consider to rewrite the flashloan contract to reduce gas used
DONE(v2.7)-solution: do not execute flashloan if the rate is same as previously executed rate; problem: if shortening the polling interval to be less than a block time (i.e. < 2sec), then need a way to avoid executing the same flashloan if they are detected across intervals
DONE(v2.9)-await the tx.wait() so to capture the confirmation time
DONE(v2.8)-add command line argument options so that this bot can be run against a mainnet fork to collect data
DONE(v2.10)-HIGH PRIORITY-gas price too high seems causing flashloan executor to stuck at BUSY and never able to execute, see logs on 20220715
DONE(v2.11)-obsolete ParallelTwoSwapsStrategy
DONE(v2.10)-remove "part:10000" in flashloan param to match the new contract interface
DONE(v2.11)-a parallel thread to report the block number
DONE(v2.12)-reduce logging
CANCELLED-progressive increase gas price to see if can pre-empt the previous execution
CANCELLED-investigate if can improve the performance between isOpp:true and flashloan execution
 -see hardhat log, if can reduce these calls:
eth_gasPrice
eth_getBlockByNumber
eth_getTransactionCount
eth_blockNumber
eth_sendRawTransaction
  Contract call:   <UnrecognizedContract>
  Transaction:     0x2f605619b5be37053d29570092ba186ee0baa64c84ea7efa35b2e62ad5c42140
  From:            0x7e10d39bc25c81004575fc764a68541bc5ddeb7b
  To:              0x441928e2a19ea7be718e41e0b7979d4d3abed57c
  Value:           0 ETH
  Gas used:        534214 of 980000
  Block #30465282: 0xc52948be9764e447923d6d1369306013a36359094c72d20254e8b9cbdbd641fc
FIXED-get price from uniswap v3 has error
DONE-loop the swap fetching to identify opportunity to flashloan
DONE-enable the multi-logs and .env configurations
DONE-identify opportunity
DONE(20/5)-after identify opportunity, call flashloan
DONE-make the time interval to be configurable
DONE(18/5)-get gas price when pflb isOpp:true
CANCELLED-add a new log to track if flashloan is executed
CANCELLED-add grouping line to stats.log so that easier to tell within the same check
DONE(21/5,v0.14)-simplify the log pattern to reduce information such as year, logger name, etc...
DONE(20/5)-add a config parameter for flashloan threshold, i.e. if amount is > $10, then execute flashloan
DONE(20/5)-time the polyscan get gasPrice API call
DONE(20/5 v0.13)-consider to add ethers get gasPrice and compare the time with polyscan API
DONE(20/5 v0.13)-or, detach the API get gasPrice call to be run in parallel and save to a cache
DONE(21/5,v0.14)-HIGH-multiple concurrent flashloan execution issue, need to add a lock to prevent that
DONE(22/5,v1.0)-make GET_GAS_PRICE_FIELD and IS_USE_RECENT_GAS_PRICE configurable
DONE(23/5,v1.1)-add timing for isOpp check
DONE(24/5,v1.2)-catch error when get gas price failed
DONE(24/5,v1.3)-concurrent flashloan execution issue seems not fixed, need to revisit
DONE(25/5,v1.5)-add to current log the route (swap name) when isOpp:true
DONE(25/5,v1.5)-see if can de-couple the first and second route API call to improve performance
DONE(27/5,v1.6)-unexpected error: 05/26T13:16:41:562;ERROR;FlEx.executeFlashloan: ERROR - currently only support swapRoutes.idxBestRouterToAmountList.length == 2;
PARTIAL_DONE(30/5,v1.7)-still need to try de-couple the fromSwap with toSwap to improve performance
DONE(27/5,v1.6)-add isOpp:true indicator to log for PTSS
CANCELLED-oldStrategy: 05/26T08:21:53:090;ERROR;Error: insufficient funds for intrinsic transaction cost
DONE(v1.9)-reduce logging in PTSS and output the winning router 
DONE(v1.9)-log the time start and duration in PTSS when isOpp:true
DONE(31/5,v1.8)-lower the gasLimit (or make it configurable) so that the node can accept the tx earlier (i.e. the tx won't be using too much space of a block)
DONE(v1.9)-finish PTSS v2
DONE(v1.10)-reduce logging in PTSS v2, also log for the pair when displaying isOpp
DONE(v1.11)-remove eth get gasPrice as I am not using it, rearrange the logging code in GasPriceCalculator
DONE(v1.12)-increase the number of decimal point when logging prices to stats log file
DONE(v1.13)-do not execute flashloan if gasprice is over the gasPriceLimit
DONE(v1.14)-add isFlashloaning flag to stop multiple concurrent flashloan executions
DONE(v1.14)-obsolete the serial strategy
DONE(v2.2)-a new strategy: parallel multi trades strategy (PMTS)
DONE(v2.3)-split the flashloan connect contract and execute contract, for further timing analysis
DONE(v2.4)-should consider to connect the flashloan contract once at init time if allowed
DONE(v2.6)-need to resolve the conflict if 2 trades are detected; solution: only execute one trade (the one with highest rate of return)
DONE(v2.5)-should allow the polling price check to execute while just don't call flashloan if one already in progress
DONE(v2.6)-use ethers.providers.StaticJsonRpcProvider instead of ethers.providers.JsonRpcProvider to attempt to improve performance
